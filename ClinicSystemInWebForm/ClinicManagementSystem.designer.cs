#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClinicSystemInWebForm
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CMS")]
	public partial class ClinicManagementSystemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTBLAPPOINTMENT(TBLAPPOINTMENT instance);
    partial void UpdateTBLAPPOINTMENT(TBLAPPOINTMENT instance);
    partial void DeleteTBLAPPOINTMENT(TBLAPPOINTMENT instance);
    partial void InsertTBLDOCTOR(TBLDOCTOR instance);
    partial void UpdateTBLDOCTOR(TBLDOCTOR instance);
    partial void DeleteTBLDOCTOR(TBLDOCTOR instance);
    partial void InsertTBLFEEDBACK(TBLFEEDBACK instance);
    partial void UpdateTBLFEEDBACK(TBLFEEDBACK instance);
    partial void DeleteTBLFEEDBACK(TBLFEEDBACK instance);
    partial void InsertTBLROLE(TBLROLE instance);
    partial void UpdateTBLROLE(TBLROLE instance);
    partial void DeleteTBLROLE(TBLROLE instance);
    partial void InsertTBLUSERROLE(TBLUSERROLE instance);
    partial void UpdateTBLUSERROLE(TBLUSERROLE instance);
    partial void DeleteTBLUSERROLE(TBLUSERROLE instance);
    partial void InsertTBLUSER(TBLUSER instance);
    partial void UpdateTBLUSER(TBLUSER instance);
    partial void DeleteTBLUSER(TBLUSER instance);
    partial void InsertTBLPATIENT(TBLPATIENT instance);
    partial void UpdateTBLPATIENT(TBLPATIENT instance);
    partial void DeleteTBLPATIENT(TBLPATIENT instance);
    #endregion
		
		public ClinicManagementSystemDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CMSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ClinicManagementSystemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClinicManagementSystemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClinicManagementSystemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClinicManagementSystemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TBLAPPOINTMENT> TBLAPPOINTMENTs
		{
			get
			{
				return this.GetTable<TBLAPPOINTMENT>();
			}
		}
		
		public System.Data.Linq.Table<TBLDOCTOR> TBLDOCTORs
		{
			get
			{
				return this.GetTable<TBLDOCTOR>();
			}
		}
		
		public System.Data.Linq.Table<TBLFEEDBACK> TBLFEEDBACKs
		{
			get
			{
				return this.GetTable<TBLFEEDBACK>();
			}
		}
		
		public System.Data.Linq.Table<TBLROLE> TBLROLEs
		{
			get
			{
				return this.GetTable<TBLROLE>();
			}
		}
		
		public System.Data.Linq.Table<TBLUSERROLE> TBLUSERROLEs
		{
			get
			{
				return this.GetTable<TBLUSERROLE>();
			}
		}
		
		public System.Data.Linq.Table<TBLUSER> TBLUSERs
		{
			get
			{
				return this.GetTable<TBLUSER>();
			}
		}
		
		public System.Data.Linq.Table<TBLPATIENT> TBLPATIENTs
		{
			get
			{
				return this.GetTable<TBLPATIENT>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLAPPOINTMENT")]
	public partial class TBLAPPOINTMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _appoinment_ID;
		
		private int _appointment_DoctorID;
		
		private int _appointment_PatientID;
		
		private System.DateTime _appointment_Date;
		
		private string _appointment_Status;
		
		private EntitySet<TBLFEEDBACK> _TBLFEEDBACKs;
		
		private EntityRef<TBLDOCTOR> _TBLDOCTOR;
		
		private EntityRef<TBLPATIENT> _TBLPATIENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onappoinment_IDChanging(int value);
    partial void Onappoinment_IDChanged();
    partial void Onappointment_DoctorIDChanging(int value);
    partial void Onappointment_DoctorIDChanged();
    partial void Onappointment_PatientIDChanging(int value);
    partial void Onappointment_PatientIDChanged();
    partial void Onappointment_DateChanging(System.DateTime value);
    partial void Onappointment_DateChanged();
    partial void Onappointment_StatusChanging(string value);
    partial void Onappointment_StatusChanged();
    #endregion
		
		public TBLAPPOINTMENT()
		{
			this._TBLFEEDBACKs = new EntitySet<TBLFEEDBACK>(new Action<TBLFEEDBACK>(this.attach_TBLFEEDBACKs), new Action<TBLFEEDBACK>(this.detach_TBLFEEDBACKs));
			this._TBLDOCTOR = default(EntityRef<TBLDOCTOR>);
			this._TBLPATIENT = default(EntityRef<TBLPATIENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appoinment_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int appoinment_ID
		{
			get
			{
				return this._appoinment_ID;
			}
			set
			{
				if ((this._appoinment_ID != value))
				{
					this.Onappoinment_IDChanging(value);
					this.SendPropertyChanging();
					this._appoinment_ID = value;
					this.SendPropertyChanged("appoinment_ID");
					this.Onappoinment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appointment_DoctorID", DbType="Int NOT NULL")]
		public int appointment_DoctorID
		{
			get
			{
				return this._appointment_DoctorID;
			}
			set
			{
				if ((this._appointment_DoctorID != value))
				{
					if (this._TBLDOCTOR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onappointment_DoctorIDChanging(value);
					this.SendPropertyChanging();
					this._appointment_DoctorID = value;
					this.SendPropertyChanged("appointment_DoctorID");
					this.Onappointment_DoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appointment_PatientID", DbType="Int NOT NULL")]
		public int appointment_PatientID
		{
			get
			{
				return this._appointment_PatientID;
			}
			set
			{
				if ((this._appointment_PatientID != value))
				{
					if (this._TBLPATIENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onappointment_PatientIDChanging(value);
					this.SendPropertyChanging();
					this._appointment_PatientID = value;
					this.SendPropertyChanged("appointment_PatientID");
					this.Onappointment_PatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appointment_Date", DbType="DateTime NOT NULL")]
		public System.DateTime appointment_Date
		{
			get
			{
				return this._appointment_Date;
			}
			set
			{
				if ((this._appointment_Date != value))
				{
					this.Onappointment_DateChanging(value);
					this.SendPropertyChanging();
					this._appointment_Date = value;
					this.SendPropertyChanged("appointment_Date");
					this.Onappointment_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appointment_Status", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string appointment_Status
		{
			get
			{
				return this._appointment_Status;
			}
			set
			{
				if ((this._appointment_Status != value))
				{
					this.Onappointment_StatusChanging(value);
					this.SendPropertyChanging();
					this._appointment_Status = value;
					this.SendPropertyChanged("appointment_Status");
					this.Onappointment_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLAPPOINTMENT_TBLFEEDBACK", Storage="_TBLFEEDBACKs", ThisKey="appoinment_ID", OtherKey="feedAppoinment_ID")]
		public EntitySet<TBLFEEDBACK> TBLFEEDBACKs
		{
			get
			{
				return this._TBLFEEDBACKs;
			}
			set
			{
				this._TBLFEEDBACKs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLDOCTOR_TBLAPPOINTMENT", Storage="_TBLDOCTOR", ThisKey="appointment_DoctorID", OtherKey="doctor_ID", IsForeignKey=true)]
		public TBLDOCTOR TBLDOCTOR
		{
			get
			{
				return this._TBLDOCTOR.Entity;
			}
			set
			{
				TBLDOCTOR previousValue = this._TBLDOCTOR.Entity;
				if (((previousValue != value) 
							|| (this._TBLDOCTOR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TBLDOCTOR.Entity = null;
						previousValue.TBLAPPOINTMENTs.Remove(this);
					}
					this._TBLDOCTOR.Entity = value;
					if ((value != null))
					{
						value.TBLAPPOINTMENTs.Add(this);
						this._appointment_DoctorID = value.doctor_ID;
					}
					else
					{
						this._appointment_DoctorID = default(int);
					}
					this.SendPropertyChanged("TBLDOCTOR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLPATIENT_TBLAPPOINTMENT", Storage="_TBLPATIENT", ThisKey="appointment_PatientID", OtherKey="patient_ID", IsForeignKey=true)]
		public TBLPATIENT TBLPATIENT
		{
			get
			{
				return this._TBLPATIENT.Entity;
			}
			set
			{
				TBLPATIENT previousValue = this._TBLPATIENT.Entity;
				if (((previousValue != value) 
							|| (this._TBLPATIENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TBLPATIENT.Entity = null;
						previousValue.TBLAPPOINTMENTs.Remove(this);
					}
					this._TBLPATIENT.Entity = value;
					if ((value != null))
					{
						value.TBLAPPOINTMENTs.Add(this);
						this._appointment_PatientID = value.patient_ID;
					}
					else
					{
						this._appointment_PatientID = default(int);
					}
					this.SendPropertyChanged("TBLPATIENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBLFEEDBACKs(TBLFEEDBACK entity)
		{
			this.SendPropertyChanging();
			entity.TBLAPPOINTMENT = this;
		}
		
		private void detach_TBLFEEDBACKs(TBLFEEDBACK entity)
		{
			this.SendPropertyChanging();
			entity.TBLAPPOINTMENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLDOCTOR")]
	public partial class TBLDOCTOR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _doctor_ID;
		
		private string _doctor_Name;
		
		private string _doctor_Phone;
		
		private string _doctor_Email;
		
		private int _doctor_Fee;
		
		private int _doctor_Salary;
		
		private string _doctor_Specialization;
		
		private string _is_Active;
		
		private EntitySet<TBLAPPOINTMENT> _TBLAPPOINTMENTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondoctor_IDChanging(int value);
    partial void Ondoctor_IDChanged();
    partial void Ondoctor_NameChanging(string value);
    partial void Ondoctor_NameChanged();
    partial void Ondoctor_PhoneChanging(string value);
    partial void Ondoctor_PhoneChanged();
    partial void Ondoctor_EmailChanging(string value);
    partial void Ondoctor_EmailChanged();
    partial void Ondoctor_FeeChanging(int value);
    partial void Ondoctor_FeeChanged();
    partial void Ondoctor_SalaryChanging(int value);
    partial void Ondoctor_SalaryChanged();
    partial void Ondoctor_SpecializationChanging(string value);
    partial void Ondoctor_SpecializationChanged();
    partial void Onis_ActiveChanging(string value);
    partial void Onis_ActiveChanged();
    #endregion
		
		public TBLDOCTOR()
		{
			this._TBLAPPOINTMENTs = new EntitySet<TBLAPPOINTMENT>(new Action<TBLAPPOINTMENT>(this.attach_TBLAPPOINTMENTs), new Action<TBLAPPOINTMENT>(this.detach_TBLAPPOINTMENTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int doctor_ID
		{
			get
			{
				return this._doctor_ID;
			}
			set
			{
				if ((this._doctor_ID != value))
				{
					this.Ondoctor_IDChanging(value);
					this.SendPropertyChanging();
					this._doctor_ID = value;
					this.SendPropertyChanged("doctor_ID");
					this.Ondoctor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string doctor_Name
		{
			get
			{
				return this._doctor_Name;
			}
			set
			{
				if ((this._doctor_Name != value))
				{
					this.Ondoctor_NameChanging(value);
					this.SendPropertyChanging();
					this._doctor_Name = value;
					this.SendPropertyChanged("doctor_Name");
					this.Ondoctor_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string doctor_Phone
		{
			get
			{
				return this._doctor_Phone;
			}
			set
			{
				if ((this._doctor_Phone != value))
				{
					this.Ondoctor_PhoneChanging(value);
					this.SendPropertyChanging();
					this._doctor_Phone = value;
					this.SendPropertyChanged("doctor_Phone");
					this.Ondoctor_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string doctor_Email
		{
			get
			{
				return this._doctor_Email;
			}
			set
			{
				if ((this._doctor_Email != value))
				{
					this.Ondoctor_EmailChanging(value);
					this.SendPropertyChanging();
					this._doctor_Email = value;
					this.SendPropertyChanged("doctor_Email");
					this.Ondoctor_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_Fee", DbType="Int NOT NULL")]
		public int doctor_Fee
		{
			get
			{
				return this._doctor_Fee;
			}
			set
			{
				if ((this._doctor_Fee != value))
				{
					this.Ondoctor_FeeChanging(value);
					this.SendPropertyChanging();
					this._doctor_Fee = value;
					this.SendPropertyChanged("doctor_Fee");
					this.Ondoctor_FeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_Salary", DbType="Int NOT NULL")]
		public int doctor_Salary
		{
			get
			{
				return this._doctor_Salary;
			}
			set
			{
				if ((this._doctor_Salary != value))
				{
					this.Ondoctor_SalaryChanging(value);
					this.SendPropertyChanging();
					this._doctor_Salary = value;
					this.SendPropertyChanged("doctor_Salary");
					this.Ondoctor_SalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_Specialization", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string doctor_Specialization
		{
			get
			{
				return this._doctor_Specialization;
			}
			set
			{
				if ((this._doctor_Specialization != value))
				{
					this.Ondoctor_SpecializationChanging(value);
					this.SendPropertyChanging();
					this._doctor_Specialization = value;
					this.SendPropertyChanged("doctor_Specialization");
					this.Ondoctor_SpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_Active", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string is_Active
		{
			get
			{
				return this._is_Active;
			}
			set
			{
				if ((this._is_Active != value))
				{
					this.Onis_ActiveChanging(value);
					this.SendPropertyChanging();
					this._is_Active = value;
					this.SendPropertyChanged("is_Active");
					this.Onis_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLDOCTOR_TBLAPPOINTMENT", Storage="_TBLAPPOINTMENTs", ThisKey="doctor_ID", OtherKey="appointment_DoctorID")]
		public EntitySet<TBLAPPOINTMENT> TBLAPPOINTMENTs
		{
			get
			{
				return this._TBLAPPOINTMENTs;
			}
			set
			{
				this._TBLAPPOINTMENTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBLAPPOINTMENTs(TBLAPPOINTMENT entity)
		{
			this.SendPropertyChanging();
			entity.TBLDOCTOR = this;
		}
		
		private void detach_TBLAPPOINTMENTs(TBLAPPOINTMENT entity)
		{
			this.SendPropertyChanging();
			entity.TBLDOCTOR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLFEEDBACK")]
	public partial class TBLFEEDBACK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _feedback_ID;
		
		private int _feedAppoinment_ID;
		
		private string _feedback_Remarks;
		
		private string _feedback_Dignosis;
		
		private System.DateTime _feedback_DateTime;
		
		private string _feedback_Presciption;
		
		private EntityRef<TBLAPPOINTMENT> _TBLAPPOINTMENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfeedback_IDChanging(int value);
    partial void Onfeedback_IDChanged();
    partial void OnfeedAppoinment_IDChanging(int value);
    partial void OnfeedAppoinment_IDChanged();
    partial void Onfeedback_RemarksChanging(string value);
    partial void Onfeedback_RemarksChanged();
    partial void Onfeedback_DignosisChanging(string value);
    partial void Onfeedback_DignosisChanged();
    partial void Onfeedback_DateTimeChanging(System.DateTime value);
    partial void Onfeedback_DateTimeChanged();
    partial void Onfeedback_PresciptionChanging(string value);
    partial void Onfeedback_PresciptionChanged();
    #endregion
		
		public TBLFEEDBACK()
		{
			this._TBLAPPOINTMENT = default(EntityRef<TBLAPPOINTMENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedback_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int feedback_ID
		{
			get
			{
				return this._feedback_ID;
			}
			set
			{
				if ((this._feedback_ID != value))
				{
					this.Onfeedback_IDChanging(value);
					this.SendPropertyChanging();
					this._feedback_ID = value;
					this.SendPropertyChanged("feedback_ID");
					this.Onfeedback_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedAppoinment_ID", DbType="Int NOT NULL")]
		public int feedAppoinment_ID
		{
			get
			{
				return this._feedAppoinment_ID;
			}
			set
			{
				if ((this._feedAppoinment_ID != value))
				{
					if (this._TBLAPPOINTMENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfeedAppoinment_IDChanging(value);
					this.SendPropertyChanging();
					this._feedAppoinment_ID = value;
					this.SendPropertyChanged("feedAppoinment_ID");
					this.OnfeedAppoinment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedback_Remarks", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string feedback_Remarks
		{
			get
			{
				return this._feedback_Remarks;
			}
			set
			{
				if ((this._feedback_Remarks != value))
				{
					this.Onfeedback_RemarksChanging(value);
					this.SendPropertyChanging();
					this._feedback_Remarks = value;
					this.SendPropertyChanged("feedback_Remarks");
					this.Onfeedback_RemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedback_Dignosis", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string feedback_Dignosis
		{
			get
			{
				return this._feedback_Dignosis;
			}
			set
			{
				if ((this._feedback_Dignosis != value))
				{
					this.Onfeedback_DignosisChanging(value);
					this.SendPropertyChanging();
					this._feedback_Dignosis = value;
					this.SendPropertyChanged("feedback_Dignosis");
					this.Onfeedback_DignosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedback_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime feedback_DateTime
		{
			get
			{
				return this._feedback_DateTime;
			}
			set
			{
				if ((this._feedback_DateTime != value))
				{
					this.Onfeedback_DateTimeChanging(value);
					this.SendPropertyChanging();
					this._feedback_DateTime = value;
					this.SendPropertyChanged("feedback_DateTime");
					this.Onfeedback_DateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feedback_Presciption", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string feedback_Presciption
		{
			get
			{
				return this._feedback_Presciption;
			}
			set
			{
				if ((this._feedback_Presciption != value))
				{
					this.Onfeedback_PresciptionChanging(value);
					this.SendPropertyChanging();
					this._feedback_Presciption = value;
					this.SendPropertyChanged("feedback_Presciption");
					this.Onfeedback_PresciptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLAPPOINTMENT_TBLFEEDBACK", Storage="_TBLAPPOINTMENT", ThisKey="feedAppoinment_ID", OtherKey="appoinment_ID", IsForeignKey=true)]
		public TBLAPPOINTMENT TBLAPPOINTMENT
		{
			get
			{
				return this._TBLAPPOINTMENT.Entity;
			}
			set
			{
				TBLAPPOINTMENT previousValue = this._TBLAPPOINTMENT.Entity;
				if (((previousValue != value) 
							|| (this._TBLAPPOINTMENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TBLAPPOINTMENT.Entity = null;
						previousValue.TBLFEEDBACKs.Remove(this);
					}
					this._TBLAPPOINTMENT.Entity = value;
					if ((value != null))
					{
						value.TBLFEEDBACKs.Add(this);
						this._feedAppoinment_ID = value.appoinment_ID;
					}
					else
					{
						this._feedAppoinment_ID = default(int);
					}
					this.SendPropertyChanged("TBLAPPOINTMENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLROLES")]
	public partial class TBLROLE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleID;
		
		private string _roleName;
		
		private EntitySet<TBLUSERROLE> _TBLUSERROLEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OnroleNameChanging(string value);
    partial void OnroleNameChanged();
    #endregion
		
		public TBLROLE()
		{
			this._TBLUSERROLEs = new EntitySet<TBLUSERROLE>(new Action<TBLUSERROLE>(this.attach_TBLUSERROLEs), new Action<TBLUSERROLE>(this.detach_TBLUSERROLEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleName", DbType="VarChar(50)")]
		public string roleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this.OnroleNameChanging(value);
					this.SendPropertyChanging();
					this._roleName = value;
					this.SendPropertyChanged("roleName");
					this.OnroleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLROLE_TBLUSERROLE", Storage="_TBLUSERROLEs", ThisKey="roleID", OtherKey="roleID")]
		public EntitySet<TBLUSERROLE> TBLUSERROLEs
		{
			get
			{
				return this._TBLUSERROLEs;
			}
			set
			{
				this._TBLUSERROLEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBLUSERROLEs(TBLUSERROLE entity)
		{
			this.SendPropertyChanging();
			entity.TBLROLE = this;
		}
		
		private void detach_TBLUSERROLEs(TBLUSERROLE entity)
		{
			this.SendPropertyChanging();
			entity.TBLROLE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLUSERROLE")]
	public partial class TBLUSERROLE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleID;
		
		private int _userID;
		
		private string _userRoleDesc;
		
		private EntityRef<TBLROLE> _TBLROLE;
		
		private EntityRef<TBLUSER> _TBLUSER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnuserRoleDescChanging(string value);
    partial void OnuserRoleDescChanged();
    #endregion
		
		public TBLUSERROLE()
		{
			this._TBLROLE = default(EntityRef<TBLROLE>);
			this._TBLUSER = default(EntityRef<TBLUSER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					if (this._TBLROLE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._TBLUSER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userRoleDesc", DbType="VarChar(255)")]
		public string userRoleDesc
		{
			get
			{
				return this._userRoleDesc;
			}
			set
			{
				if ((this._userRoleDesc != value))
				{
					this.OnuserRoleDescChanging(value);
					this.SendPropertyChanging();
					this._userRoleDesc = value;
					this.SendPropertyChanged("userRoleDesc");
					this.OnuserRoleDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLROLE_TBLUSERROLE", Storage="_TBLROLE", ThisKey="roleID", OtherKey="roleID", IsForeignKey=true)]
		public TBLROLE TBLROLE
		{
			get
			{
				return this._TBLROLE.Entity;
			}
			set
			{
				TBLROLE previousValue = this._TBLROLE.Entity;
				if (((previousValue != value) 
							|| (this._TBLROLE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TBLROLE.Entity = null;
						previousValue.TBLUSERROLEs.Remove(this);
					}
					this._TBLROLE.Entity = value;
					if ((value != null))
					{
						value.TBLUSERROLEs.Add(this);
						this._roleID = value.roleID;
					}
					else
					{
						this._roleID = default(int);
					}
					this.SendPropertyChanged("TBLROLE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLUSER_TBLUSERROLE", Storage="_TBLUSER", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public TBLUSER TBLUSER
		{
			get
			{
				return this._TBLUSER.Entity;
			}
			set
			{
				TBLUSER previousValue = this._TBLUSER.Entity;
				if (((previousValue != value) 
							|| (this._TBLUSER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TBLUSER.Entity = null;
						previousValue.TBLUSERROLEs.Remove(this);
					}
					this._TBLUSER.Entity = value;
					if ((value != null))
					{
						value.TBLUSERROLEs.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("TBLUSER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLUSERS")]
	public partial class TBLUSER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private string _userName;
		
		private string _userEmail;
		
		private string _userpassword;
		
		private EntitySet<TBLUSERROLE> _TBLUSERROLEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnuserEmailChanging(string value);
    partial void OnuserEmailChanged();
    partial void OnuserpasswordChanging(string value);
    partial void OnuserpasswordChanged();
    #endregion
		
		public TBLUSER()
		{
			this._TBLUSERROLEs = new EntitySet<TBLUSERROLE>(new Action<TBLUSERROLE>(this.attach_TBLUSERROLEs), new Action<TBLUSERROLE>(this.detach_TBLUSERROLEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userEmail", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string userEmail
		{
			get
			{
				return this._userEmail;
			}
			set
			{
				if ((this._userEmail != value))
				{
					this.OnuserEmailChanging(value);
					this.SendPropertyChanging();
					this._userEmail = value;
					this.SendPropertyChanged("userEmail");
					this.OnuserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userpassword", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string userpassword
		{
			get
			{
				return this._userpassword;
			}
			set
			{
				if ((this._userpassword != value))
				{
					this.OnuserpasswordChanging(value);
					this.SendPropertyChanging();
					this._userpassword = value;
					this.SendPropertyChanged("userpassword");
					this.OnuserpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLUSER_TBLUSERROLE", Storage="_TBLUSERROLEs", ThisKey="userID", OtherKey="userID")]
		public EntitySet<TBLUSERROLE> TBLUSERROLEs
		{
			get
			{
				return this._TBLUSERROLEs;
			}
			set
			{
				this._TBLUSERROLEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBLUSERROLEs(TBLUSERROLE entity)
		{
			this.SendPropertyChanging();
			entity.TBLUSER = this;
		}
		
		private void detach_TBLUSERROLEs(TBLUSERROLE entity)
		{
			this.SendPropertyChanging();
			entity.TBLUSER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLPATIENT")]
	public partial class TBLPATIENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _patient_ID;
		
		private string _patient_Name;
		
		private string _patient_BirthDate;
		
		private string _patient_Height;
		
		private int _patient_Weight;
		
		private string _patient_Email;
		
		private string _patient_Phone;
		
		private string _patient_Address;
		
		private string _patient_Gender;
		
		private EntitySet<TBLAPPOINTMENT> _TBLAPPOINTMENTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpatient_IDChanging(int value);
    partial void Onpatient_IDChanged();
    partial void Onpatient_NameChanging(string value);
    partial void Onpatient_NameChanged();
    partial void Onpatient_BirthDateChanging(string value);
    partial void Onpatient_BirthDateChanged();
    partial void Onpatient_HeightChanging(string value);
    partial void Onpatient_HeightChanged();
    partial void Onpatient_WeightChanging(int value);
    partial void Onpatient_WeightChanged();
    partial void Onpatient_EmailChanging(string value);
    partial void Onpatient_EmailChanged();
    partial void Onpatient_PhoneChanging(string value);
    partial void Onpatient_PhoneChanged();
    partial void Onpatient_AddressChanging(string value);
    partial void Onpatient_AddressChanged();
    partial void Onpatient_GenderChanging(string value);
    partial void Onpatient_GenderChanged();
    #endregion
		
		public TBLPATIENT()
		{
			this._TBLAPPOINTMENTs = new EntitySet<TBLAPPOINTMENT>(new Action<TBLAPPOINTMENT>(this.attach_TBLAPPOINTMENTs), new Action<TBLAPPOINTMENT>(this.detach_TBLAPPOINTMENTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int patient_ID
		{
			get
			{
				return this._patient_ID;
			}
			set
			{
				if ((this._patient_ID != value))
				{
					this.Onpatient_IDChanging(value);
					this.SendPropertyChanging();
					this._patient_ID = value;
					this.SendPropertyChanged("patient_ID");
					this.Onpatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string patient_Name
		{
			get
			{
				return this._patient_Name;
			}
			set
			{
				if ((this._patient_Name != value))
				{
					this.Onpatient_NameChanging(value);
					this.SendPropertyChanging();
					this._patient_Name = value;
					this.SendPropertyChanged("patient_Name");
					this.Onpatient_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_BirthDate", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string patient_BirthDate
		{
			get
			{
				return this._patient_BirthDate;
			}
			set
			{
				if ((this._patient_BirthDate != value))
				{
					this.Onpatient_BirthDateChanging(value);
					this.SendPropertyChanging();
					this._patient_BirthDate = value;
					this.SendPropertyChanged("patient_BirthDate");
					this.Onpatient_BirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_Height", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string patient_Height
		{
			get
			{
				return this._patient_Height;
			}
			set
			{
				if ((this._patient_Height != value))
				{
					this.Onpatient_HeightChanging(value);
					this.SendPropertyChanging();
					this._patient_Height = value;
					this.SendPropertyChanged("patient_Height");
					this.Onpatient_HeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_Weight", DbType="Int NOT NULL")]
		public int patient_Weight
		{
			get
			{
				return this._patient_Weight;
			}
			set
			{
				if ((this._patient_Weight != value))
				{
					this.Onpatient_WeightChanging(value);
					this.SendPropertyChanging();
					this._patient_Weight = value;
					this.SendPropertyChanged("patient_Weight");
					this.Onpatient_WeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string patient_Email
		{
			get
			{
				return this._patient_Email;
			}
			set
			{
				if ((this._patient_Email != value))
				{
					this.Onpatient_EmailChanging(value);
					this.SendPropertyChanging();
					this._patient_Email = value;
					this.SendPropertyChanged("patient_Email");
					this.Onpatient_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string patient_Phone
		{
			get
			{
				return this._patient_Phone;
			}
			set
			{
				if ((this._patient_Phone != value))
				{
					this.Onpatient_PhoneChanging(value);
					this.SendPropertyChanging();
					this._patient_Phone = value;
					this.SendPropertyChanged("patient_Phone");
					this.Onpatient_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_Address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string patient_Address
		{
			get
			{
				return this._patient_Address;
			}
			set
			{
				if ((this._patient_Address != value))
				{
					this.Onpatient_AddressChanging(value);
					this.SendPropertyChanging();
					this._patient_Address = value;
					this.SendPropertyChanged("patient_Address");
					this.Onpatient_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_Gender", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string patient_Gender
		{
			get
			{
				return this._patient_Gender;
			}
			set
			{
				if ((this._patient_Gender != value))
				{
					this.Onpatient_GenderChanging(value);
					this.SendPropertyChanging();
					this._patient_Gender = value;
					this.SendPropertyChanged("patient_Gender");
					this.Onpatient_GenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLPATIENT_TBLAPPOINTMENT", Storage="_TBLAPPOINTMENTs", ThisKey="patient_ID", OtherKey="appointment_PatientID")]
		public EntitySet<TBLAPPOINTMENT> TBLAPPOINTMENTs
		{
			get
			{
				return this._TBLAPPOINTMENTs;
			}
			set
			{
				this._TBLAPPOINTMENTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBLAPPOINTMENTs(TBLAPPOINTMENT entity)
		{
			this.SendPropertyChanging();
			entity.TBLPATIENT = this;
		}
		
		private void detach_TBLAPPOINTMENTs(TBLAPPOINTMENT entity)
		{
			this.SendPropertyChanging();
			entity.TBLPATIENT = null;
		}
	}
}
#pragma warning restore 1591
